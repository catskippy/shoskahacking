const fs = require('fs');
const readline = require('readline');

// Функция для имитации сложных вычислений (первая)
function complexCalculation1() {
  let result = 0;
  for (let i = 0; i < 1e7; i++) {
    result += Math.sin(i) * Math.cos(i) *
              Math.tan(i) - Math.sqrt(i) *
              Math.pow(i, 2) + Math.log(i) *
              Math.exp(i % 100);
  }
  return result;
}

// Функция для имитации сложных вычислений (вторая)
function complexCalculation2() {
  let result = 1;
  for (let i = 1; i < 1e7; i++) {
    result *= (Math.sin(i) + Math.cos(i) -
               Math.tan(i) + Math.sqrt(i) -
               Math.pow(i, 2) + Math.log(i) +
               Math.exp(i % 50)) / (i % 100 + 1);
  }
  return result;
}

// Функция для имитации очень сложных вычислений для случайной задержки
function complexRandomCalculation() {
  let result = 0;
  for (let i = 0; i < 1e8; i++) {
    result += Math.sin(i) * Math.cos(i) *
              Math.tan(i) - Math.sqrt(i) *
              Math.pow(i, 3) + Math.log(i) *
              Math.exp(i % 100) / (i % 300 + 1);
  }
  return result % 5000; // Возвращаем значение в диапазоне 0-5000 миллисекунд
}

// Усложненная функция для имитации вычислений (третья)
function complexCalculation3() {
  let result = 0;
  for (let i = 0; i < 1e7; i++) {
    result += Math.sin(i) * Math.cos(i) *
              Math.tan(i) - Math.sqrt(i) *
              Math.pow(i, 2) + Math.log(i) *
              Math.exp(i % 100) / (i % 200 + 1);
  }
  for (let i = 0; i < 1e6; i++) {
    result += Math.sin(i) * Math.cos(i) *
              Math.tan(i) - Math.sqrt(i) *
              Math.pow(i, 3) + Math.log(i) *
              Math.exp(i % 50) / (i % 150 + 1);
  }
  for (let i = 0; i < 1e5; i++) {
    result += Math.sin(i) * Math.cos(i) *
              Math.tan(i) - Math.sqrt(i) *
              Math.pow(i, 4) + Math.log(i) *
              Math.exp(i % 25) / (i % 100 + 1);
  }
  return result;
}

// Усложненная функция для имитации вычислений через формулу
function complexFormulaCalculation() {
  let result = 0;
  for (let i = 0; i < 1e9; i++) {
    result += (Math.sin(i) * Math.cos(i) * Math.tan(i) - Math.sqrt(i) + Math.pow(i, 2) - Math.log(i) + Math.exp(i % 100)) / (Math.PI + Math.E);
  }
  return result;
}

// Асинхронная функция для имитации задержки
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Функция для записи логов
function logMessage(message) {
  const timestamp = new Date().toISOString();
  const log = `${timestamp} - ${message}\n`;
  fs.appendFileSync('exploit-logs.txt', log);
}

// Функция для случайной сортировки массива
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// Функция для имитации взлома
async function hackServer() {
  console.log("Соединение с сервером Tigerya...");
  logMessage("СОЕДИНЕНИЕ С СЕРВЕРОМ TIGERYA...");
  await sleep(2000);

  console.log("Проверка уязвимостей...");
  logMessage("ПРОВЕРКА УЯЗВИМОСТЕЙ...");
  let vulnerabilities = [
    "SQL Injection", "XSS", "RCE", "CSRF", "Buffer Overflow", "Directory Traversal", 
    "Privilege Escalation", "Command Injection", "File Inclusion", "Path Traversal",
    "Insecure Deserialization", "Cross-Site Scripting (XSS)", "Cross-Site Request Forgery (CSRF)",
    "Remote Code Execution (RCE)", "Broken Authentication", "Security Misconfiguration"
  ];

  for (let i = 0; i < vulnerabilities.length; i++) {
    console.log(`Поиск уязвимости: ${vulnerabilities[i]}...`);
    logMessage(`ПОИСК УЯЗВИМОСТИ: ${vulnerabilities[i].toUpperCase()}...`);
    complexCalculation1(); // Имитация долгих вычислений
    await sleep(1000); // Задержка в 1 секунду
  }

  console.log("Уязвимости найдены!");
  logMessage("УЯЗВИМОСТИ НАЙДЕНЫ!");
  await sleep(3000);

  console.log("Эксплуатация уязвимостей...");
  logMessage("ЭКСПЛУАТАЦИЯ УЯЗВИМОСТЕЙ...");
  complexCalculation2(); // Еще раз имитируем вычисления
  await sleep(3000); // Задержка в 3 секунды

  complexCalculation3(); // Усложненная имитация вычислений
  await sleep(3000); // Задержка в 3 секунды

  console.log("Сервер взломан! Добро пожаловать на сервер Tigerya!");
  logMessage("СЕРВЕР ВЗЛОМАН! ДОБРО ПОЖАЛОВАТЬ НА СЕРВЕР TIGERYA!");

  // Позволить вводить команды для чата
  console.log("Введите 'chat' для получения доступа к чату:");
}

// Функция для взлома доступа к чату
async function accessChat() {
  console.log("Взлом доступа к чату...");
  logMessage("ВЗЛОМ ДОСТУПА К ЧАТУ...");
  complexCalculation3(); // Сложные вычисления через формулу
  await sleep(5000); // Задержка в 5 секунд

  console.log("Доступ к чату получен!");
  logMessage("ДОСТУП К ЧАТУ ПОЛУЧЕН!");

  const funnyMessages = [
    "ЕГОР ПРАВИТЕЛЬ",
    "ВСЕ ПОДСОСЫ",
    "Я ПРАВИТЕЛЬ",
    "ТЫ ПРЕДАТЕЛЬ РОДИНЫ",
    "Я СЕТНУЛ КОМАРОВО",
    "НИЖЕГОРОДСК СТРОИТЬ",
    "ТАЙГЕРИЯ ТОП!",
    "Я НА ТЕБЯ ЗАЯВЛЕНИЕ НАПИШУ",
    "ИДИ НАХУЙ",
    "ДА ПОТОМУ ЧТО МНЕ НУЖЕН ХОТЬ ОДИН ПОДСОС",
    "ОХ ТЫ ЕБАТЮШКИ",
    "ПОРА ВКЛЮЧАТЬ ДЕТСКОЕ ПОРНО",
    "НУ ТЫ ЖЕ НЕ ЛЮБИШЬ ЗЕЛЕПОПУ?",
    "ЭТО ЖЕ ГИТЛЕР",
    "НА АВУ ПОГЛЯДИМ",
    "МАРМЕЛАДИК ПИПС МОЙ",
    "ну пжжпжпжпжж",
    "пошли строить пжппжпжжппж",
    "ДИСС НА МИЛКИ СКОРО!!",
    "Скоро выйдут ещё три дисса на милкича.",
    "Егорыч Серый Кот  - Мармеладыч крут ( или же ДИСС НА МИЛКИЧА ) "
  ];

  shuffleArray(funnyMessages); // Случайная сортировка сообщений

  for (let msg of funnyMessages) {
    let fullMsg = `<Egorka> ${msg}`;
    console.log(fullMsg);
    logMessage(fullMsg);
    let delay = complexRandomCalculation();
    await sleep(delay); // Случайная задержка между сообщениями
  }

  // Возвращаем приглашение root@ubuntu после выполнения команды chat
  rl.setPrompt('\x1b[32mroot@ubuntu\x1b[0m:\x1b[34m~$\x1b[0m ');
  rl.prompt();
}

// Функция для обработки консольных команд
async function processCommand(command, isRoot) {
  if (isRoot) {
    if (command.trim().toLowerCase() === 'hack') {
      await hackServer();
      rl.prompt();
    } else if (command.trim().toLowerCase() === 'chat') {
      await accessChat();
    } else {
      console.log("Неизвестная команда. Попробуйте 'hack' или 'chat'.");
    }
  } else {
    if (command.trim().toLowerCase() === 'sudo su') {
      isRoot = true;
      console.log("Переключение в режим ROOT...");
      logMessage("ПЕРЕКЛЮЧЕНИЕ В РЕЖИМ ROOT.");
      rl.setPrompt('\x1b[32mroot@ubuntu\x1b[0m:\x1b[34m~$\x1b[0m ');
    } else {
      console.log("Неизвестная команда. Попробуйте 'sudo su' для получения прав ROOT.");
    }
  }
}

// Настройка интерфейса для ввода команд
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: '\x1b[32muser@ubuntu\x1b[0m:\x1b[34m~$\x1b[0m '
});

let isRoot = false;

console.log("Добро пожаловать в Ubuntu Aternos!");
console.log("Введите 'sudo su' для получения прав ROOT.");

rl.prompt();

rl.on('line', async (input) => {
  await processCommand(input, isRoot);
  if (input.trim().toLowerCase() === 'sudo su') {
    isRoot = true;
  }
  rl.prompt();
});
